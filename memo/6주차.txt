#1. 총정리
##programs

-형식:<프로그램><옵션><인수>
 -<옵션>:-+ch(캐릭터)->프로그램에 정의됨
 -<인수>:ex)디렉토리, ...
   ex)ls -l /etc/passwd
   * 옵션과 인수의 순서는 바껴도 작동은 되나 프로그램에 따라 다를수 있다.

1)date 
-현재 시간 및 날짜를 다양한 형식으로 출력한다. / 표준출력으로 뜨기때문에 파이프라인 연결가능
ex)~/KYG$ date
Sun 14 Apr 2024 03:28:43 PM UTC

2)who 
 -로그인 유저 정보
 - 출력값:usrs/your_name
ex)$who

3)echo
  -띄어쓰기/공백이 있이도 이를 무시한다. 
 ex) echo "Hello      World!“
-> 결과값 Hello World!

  -print 역할
  -어떤 변수가 왔을 떄 그것을 치환해서 나타낸다.

4)ls(list)
  - 파일디랙터리조회
  - -l:더 자세하게 조회
    *d: directory, ls -l를 출력했을 때 처음 d로 시작하는 것만 디렉터리고 나머지는 모두 파일 
 
  - -a:숨겨진것 까지 다 보여준다/ 그래서 a와 l을 같이 쓰면 숨겨진 것 까지 더자세히 
  - ls 는 멀티 컬럼으로 stdout
ex)ls -al
 * 멀티 칼럼:(column 열)
"멀티 칼럼"이라는 용어는 보통 출력되는 데이터가 여러 개의 열(column)로 구성되어 있을 때 사용된다.

하지만 "-l" 옵션을 사용하여 "ls" 명령어를 실행하면, 보다 자세한 정보를 포함한 목록이 출력됩니다. 이때 출력되는 정보는 여러 열로 구성되어 있어 "멀티 칼럼"으로 볼 수 있습니다.
  - list로 했을때는 line by line이다.("ls" 명령어를 사용하여 현재 디렉터리의 파일 및 디렉터리 목록을 출력하면 각 파일이나 디렉터리가 한 줄에 하나씩 
출력됩니다)
  -인수가 디렉터리
  *만약 파일이 인수면? 오류는 안나는데 그 이름 그대로 반환된다.
  
ls grades
 => grades
  -인수로 파일명 쓰면 그대로 반환



5)cat (concatenate)
 -인수:파일명
 -파일을 이어붙이기 가능(내용 확장할 때 사용한다/ 내가 파일을 적은 순서대로 붙인다)
 
6)wc(wordcount)
 - 라인, 단어, 글자 수 세기
 - 옵션:-l. -w. -c
 - 인수가 없으면 stdin(standard input)으로 받는다. => 줄수세라 라고 하고 파일을 안주고 그냥  wc –l(이때는 줄수만 나옴)만 하면 빠져나올수 없는 루프가 생긴다. 여기에 치는게 표준입력이다. 터미널을 통해서 들어가는 입력이다. 내가 원하는 것치고 ctrl+d를 누르면 빠져 나온다. 그러면 입력받아서 라인수 세준다. 근데 
이때 뭐안쓰고 파이프연결하면 , 입력이 없는 상태로 명령을 돌렸기 때문에 오류가 난다.
7)cp
  -같은 디렉토리 : cp from A to B (cp [옵션] [복사 대상 디렉터리or파일] [복사될 디렉터리or파일 ===당하는 것] => 복사된것의 원래 있던 내용은 없어지나
  - 다른 디렉토리 일 경우: 파일 디렉토리 까지 다써줘야... 이때 경로는 상대경로로 쓰는 게 편함
cp b ./notes/파일명

   - 같은 파일명일 경우 이름 안 써도 됨
   ex)  cp b ./notes
   
 cp cp1./good(원래 디렉토리에 cp1파일 그대로 있고 good경로로 cp1 ‘복사’)
 * cp cp1 cp2 (cp2파일 이미 존재 cp1의 내용이 cp2로 가면서 cp2의 내용없어짐)
 cp cp1 cp3 (cp3파일 새로 만듬 )

- 여러 파일 복사 가능
  cp 1 2 3 4 5 6 ()
  1-5 from , 6 to (1-5는 파일, 6은 디렉토리여야 한다 6은 1-5 파일들이 이동할 디렉토리 위치를 말한다)
ex) cp file1.txt file2.txt file3.txt backup/
(위 명령은 file1.txt, file2.txt, file3.txt를 모두 현재 디렉토리의 하위디렉토리인 backup 디렉터리로 복사합니다.그니깐 현재 디렉토리에는 위 파일들이 다 그대로 있다)

cp *.txt backup/
(위 명령은 모든 .txt 확장자를 가진 파일을 backup 디렉터리로 복사합니다.)


Q.  notes/b를 현재 디렉터리에 복사해서 가져오는 코드 작성하기
runner(pwd)
ㄴOSS
  ㄴnotes
    ㄴb
A.$ cp ./OSS/notes/b . ( 현재 작업 중인 디렉토리로 복사하는 것입)


8) mv(move복사가 아니라 이동)
- mv fromA toB 
  1)mv 1 2 3 4 5 "6"(1-5는 파일, 6은 디렉터)
  2) mv a aa # a 가 사라지고 aa (파일명이 바뀐것 이름을 변경할 때 많이 사용)
-aa파일이 없어던 경우
a의 내용은 aa로 가고, a는 없어진다. 그니깐 a의 내용이 aa로 갔다고 보면되니깐 결론 적으로 파일명만 변경한꼴 
-aa파일이 원래 있던 경우
a의 내용이 모두 aa로 가고, a는 사라지면서,bb의 내용도 덮어써짐
  3)디렉토리 A -> B(디렉토리 A에 있는 파일을 디렉토리B로 보내고 싶다)
    -실습하기)1.mkdir samr  ple
             2.vi sample/a : sample에 a라는 파일만든것
             3. mv sample notes (sample의 모든 파일을 notes로 보낸다.)
          => sample 디렉토리 자체가 notes 디렉터리 밑으로 들어감
*** cp와 mv 주의 할점: 기존에 존재하는 파일명일 경우, 덮어쓴다.(파일명이 있는데 그 파일로 옮기겠다 하며은)


9) rm(remove) 
-인수:파일명,디렉토리
-비어있는 디렉토리:rm 디렉토리 이름
-비어있지 않은 디렉토리: rm –r 디렉토리 이름
- 여러개 지우고 싶다. ex)rm a b c d /rm *.txt
- 주의:확인하고 지울것(셸은 지운것을 다시 복원하는 기능x)


10)rmdir
-empty :비어있는 디렉터리만 지울수 있다. 
- 파일 삭제 불가

##디렉토리 관련 명령(*디렉토리들은 모든게 /HOME/USER/내이름)
1)pwd
-현재디렉토리 
용어
print working directory
current direcroy
명령어 pwd만 있음

2)cd(change directory)
-..:cd(한칸 띄우고)..
-.
-cd :cd만 치면 HOME로 간다.
Q 내가 지금 note인데 notes ->runner 로 한번에가는 방법   
runner(pwd)
ㄴOSS
  ㄴnotes
    ㄴb
A. cd ../.. (/ =디렉터리간에 구분)

3)mkdir
-make directory

4)rmdir

5)ln(link files)
-ln 파일 경로 파일 경로(이러면 두 파일의 링크 연결)
-ln fromA fromB :A와 B를 항상동기화하고 싶을때 사용하는 것(cp로 파일을 복사하면 A와B두개가 존재한다 이것은 메모리 낭)
-ln의 목적:메모리 효율, 항상 동기화됨
->다른 디렉토리에도 이파일이 있는데 같이 수정이 일어나야 한다. 동일한 파일을 위치시키고 싶을 때 

-ls -l로 동기화 확인 가능함: rw-----2(번호가 2이다.)
-파일 하나를 삭제해도 다른 파일은 삭제되지 않는다. /원본파일은 상관이 없는데 복사, 즉, 링크를 건 파일은 원본이 삭제되면 사용불가. 

/KYG$ ln /home/runner/KYG/grades /home/runner/KYG/letters
ln: failed to create hard link '/home/runner/KYG/letters': File exists
~/KYG
$ 




##패턴매칭
1.asterisk
-"*"
-zero or more
 cat * # 현재 디렉토리에 있는 모든 파일의 내용 출력
 chapter* #chapter로 시작하는 모든 파일
  Q.파일명에 t가 들어있는 모든 파일(letters, w4.txt, w5.txt)
  A.*t*




2. ?
-한개 매칭
echo ? #글자 1개로 된 파일명을 출력 
ex) ~/KYG$ echo ?
C
echo ?? # bb bb.txt

=>echo ??하면 파일명이 출력된다.

3.[,]
-특정 글자 1개 매칭되는 것 전부
[abcd] #or
[02468]#
[0-9]#모든 숫자
[a-z]
ex)~/KYG$ grep Liam ch[*]
grep: ch[*]: No such file or directory
~/KYG$ grep Liam ch *
ch1:C   Liam

Q. O를 제외한 모든 소문자
A.[a-np-z] =,필요없다.
  [!o] !=except  *[^a-z]: 소문자가 아닌 것을 출력하라
  [a-n],[p-z] (x) , 까지 인식되기 때문
4.escape letter
  - 공백, $,...
  - \
  ex)공백으로 파일 두 개 분리“ cat file_a file_b(공백으로 파일 두 개를 분리하기 때문에 이건 하나로 인식하지 않는다)
cat 명령어에서 파일 이름에 공백이 포함된 경우:  따옴표 , 이스케이프 처리 
cat 'hello world'
cat hello\ world  

  -echo는 예외(공백이랑 아무상관 없다)
  Q 'who are you?'라는 디텍토리르 생성하고 목록조회하는 코드
  (안에 파일이 없으면  ls해도 출력안됨)
  A.  mkdir “who are you?”
      mkdir ‘who are you?’
      mkdir who\ are\ you?
      mkdir who are you?-> who, are,you? 라는 디렉터리가 각각 만들어짐
    
     ~/KYG$ ls "who are you?"
	w6.txt
	

	~/KYG$ ls who are you?
	ls: cannot access 'who': No such file or directory
	are:

*공백을 포함하는 디렉토리 이름을 만들려면 따옴표(')나 이스케이프 문자(\)를 사용하여 공백을 이스케이프해야 합니다.


 ##리다이렉션 (패턴으로 막 해놨어 그걸 계속 패턴으로 만들고 싶지는 않다, 그걸 파일로 저장하는 것)
 -입력 < , <<
 -출력 > 
 -에러 2
   -" " >cp_pattern1
*표준출력과 표준에러는 다른 통로로 왔다갔다 한다.
   


## 파이프라인
- |
- 표준 입출력을 이용하는 모든 프로그램은 파이프를 사용할 수 있다.
-A | B | ....
- "필터 " : 파이프라인을 사용할수 있고 입출력값을 수정할수 있는 프로그램
ex) grep,cut

##
- ; -여러 명령 한 줄에 쓸 때
ex) date;pwd (이건 파이프x, 입력값을 받는게 아니라 두 번쳐야 하는데 한줄에다 하고 엔터 치고 싶다)
======================
-오래 걸리는 명령은 기다릴수 없으니깐 명령 백그라운드로 보내기
 - <명령> (=명령 전체 말함) & 
   ex) cat bigdat > file1 &
 - 다른 프로그램 동시에 수행 가능
 -먼저 끝난 결과물이 먼저 반환이 된다.(앞에 숫자가 붙는다. 먼저수행이 되었다는 것을 알려줌)
 - stdin(조심):만약 내가 백그라운드를 돌렸는데 얘가 표준 입력을 받아야 하는 애다. 그러면 홀드가 되니깐 조심해라
*stdin:표준입력:내가 터미널로 데이터를 넣어야 하는 경우
==========================


-ps(information에 반한다??) === 어떤 정보를 알고 싶을 때 사용(그냥ps만 쳐라)
 -현재 프로세스 정보 나타냄
 -PID: process id
 -TTY: 터미널 정보
 -time:구동시간(프로그램이 작동하는 시간)
 -cmd - 프로세스 이름
 * -f옵션은 좀더 자세한 정보

##명령 2
1. cut
  - cut <> 파일명
  - 인자: -c, -f,-d
  - -f: tab으로 구분(range받을수 있다.)
Q 10번째 글자부터 끝까지
cut –c 10  file


-d<구분자>
 -d:
 cut –d: -f1 file # 구분자가 없으면 f default is tab

2. paste(cut과 비교) 열로 그니깐 세로로 붙임
   -cut 과 반대됨
   - 컬럼별로 데이터 붙임(line by line 으로,1열은 1열 , 2열은 2열 )<->cat의 경우 한줄한줄씩
   -디폴트는 탭
 -d<구분자> : 구분자 지정(콜론으로 연결하고 싶을 때 쓰는것)
 -s : 출력 내용의 행과 열 바꿈 
$ cat word1
EFFICIENT
AT
COMMAND
$ cat word2
linux
the
line
$paste word1 word2
EFFICIENT   linux
AT  the
COMMAND line
$ paste -d, word1 word2
EFFICIENT,linux
AT,the
COMMAND,line
$ paste -d, -s word1 word2
EFFICIENT,AT,COMMAND
linux,the,line
$ paste -d "\n" word1 word2(지그제그)
EFFICIENT
linux
AT
the
COMMAND
line
=============
문제) 공백으로 되어있는 것을 tab으로 바꾸고 싶다.
 ' ' -> \t
  paste -s -d' ' file

3. grep(grep 은 옵션이 많다.)
 - grep<패턴><디렉토리>
 -패턴에 매치되는 문자열을 가진 라인 출력
 -매칭 없으면 아무것도 출력되지 않는다.
 ex) grep Linux * (파일명이 아니라  파일 내부의 텍스트)
 ex) .... | grep Linux (출력에서 받은 입력값)

 Q. 전체 파일에서 * 패턴 가진 것 찾기
 
 =>패턴은 ''( 를 사용하는게 좋다.) or \*
ex)~/KYG$ grep \* star

~/KYG$ grep\* *

~/KYG$ grep '*' *

*패턴 사용법
 [a-z]
 ^(시작),$(끝)
ex)~/KYG$ grep ^E words1(E가 처음으로 시작하는 단어)
EFFICIENT
-------------------------------
~/KYG$ grep T$ words1
EFFICIENT
AT

 ^[A-Z]* = 대문자로 시작
 *.txt$

ex)^는 문자열의 시작을 나타내며, 해당 문자열 패턴이 문자열의 시작에서 발생해야 함을 의미합니다. 예를 들어, ^hello는 문자열이 "hello"로 시작해야 매치되는 것을 의미합니다.

$는 문자열의 끝을 나타내며, 해당 문자열 패턴이 문자열의 끝에 위치해야 함을 의미합니다. 예를 들어, world$는 문자열이 "world"로 끝나야 매치되는 것을 의미합니다.

 -i : 대소문자 구분 안함 

ex)
$ grep at -i words1
AT
 -w :정확한 매칭만
  the를 찾으면 -> there (x)
-v : 반대, 포함 안 되는 
-l : 해당 매칭이 있는 파일명
ex)~/KYG$ grep -l '*' * (*가 있는 파일의 파일의 이름을 싹다(*)출력해라)


Q. 해당 매칭이 있는 파일 개수
A. grep -l 'A' * | wc -l

-n : 라인 넘버 같이 출력

4. sort
  - 정렬
  -라인별로, 오름차순 디폴트
  - -r:내림차순(작은게 맨 먼저)
  - -n: 숫자로 인식 (=> n옵션 필요이유: 다른 프로그래밍언어는 데이터 타입이 있지만 셀은 없어서 셸은 모든 인수를 문자열로 인식한다.)
  ex) str :1, 11, 2, 3(sort sort)
      int :1,2,3,11(sort –n sort)
- 특수문자, 다른 언어중에 특수 기호 사용하는 문자 정렬순서 주의할것
ex) ' '은 32로 치환되고...

- -u:sort +uniq (중복을 없앤다)


-o(정렬된 결과물을 같은 파일에 저장)
   sort file1 –o  >file1(x) :원래 같은 파일 에 저장 안되는데 –o 쓰면 가능 

5.uniq
 - 중복 삭제
 -인접한 것만 고려한다.
  - -d:  연속으로 중복된 내용을 지닌 줄만을 한 번씩 보여준다.
C
B
A
A
B
C
B           
B
A
D
F
  - -c : 중복된 횟수 카운트



6.tr
 - tr from_char to_char
ex) tr e x ( e를 모두 x로 바꿔줘라)
- 주의) tr e x file (x) ->  tr e x <input(입력리다이렉션으로 넣어줘야 함)
   :파일이 아니고 입력리다이렉션으로 넣어줘야 함 / 파이프라인에서는 유용한데 그냥 파일에 있는 뭔가를 수정하는 애는 아니다.
 Q) animals.txt e -> x

 Q) animals.txt에서 소문자 ->대문자로 바꾸고 싶다.
~/KYG$ tr '[a-z]' '[A-Z]' < animals.txt
 -d: 삭제
ex) tr –d the (the 삭제) < animals.txt (x) 
ex) tr –d ‘apple’ < letters (문자a,p,p,l,e삭제)
ex) tr –d  apple < letters (문자a,p,p,l,e삭제)