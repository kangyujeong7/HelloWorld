 git(버전관리를 하는 리눅스와 아예 다른 시스템) 
 <복습>
git init (초기화할 때 한번 그다음부터는 사용하면 안된다)
git status
git add file.txt
git commit -m "commit 1"


## (앞의복습부분의 상태 간단히 보고 싶다) 짧게 확인하기
git status -s
- status code
 출력값 :XY(status code)
  - x: staging area의 상태
  - y: 현재 디렉토리의 상태
 ex1) M notes/w12.md (x는 없고 y만표시되어 있는상태 :이 경우 staging area는 clean 이고, M은 노트 w12가 수정이 들어갔다)
ex2)~/KYG-1$ git status -s
A  .replit
AD animals.txt
AD grades
AD letters
  - ?? : untracked(깃에서 전혀보지 못한 새로 생성된 파일)
  - A : added
  - M : modified
  - D : deleted
  - R : renamed
  - MM: /modified
  - AM :
  - !! : ignored
    --ignored : 깃에 보이지 않는 무시된 파일의 상태까지 나타냄

         

  - "" : clean(모든 것이 commit이 되었을때는 아무것도 안나타다는 empty상태여야 clean하다 )


실습하기)시나리오 1:파일 1개 생성 -> 스테이징 -> 수정 -> 커밋 ->




ls로 sample.txt만들어 졌는지 확인
cat로 sample.txt내용 확인
git status로 sample,txt로 내용살표보면 ??로 untracked
git add . 으로 staging을 시키자 
그리고 다시 git status로 확인하면 A로 스테이징이 된 것을 알수 있다,
commit을 하기 전에 뭔가 modification을 하자
sample.txt에 hello world 2추가
그리고 나서 git status –s로 체크를 하면
AM sample.txt(staging area 에서는 added가 되었는데, 내 지금 디렉토리에서는 modfied가 되었다)
그리고 커밋을 하자 메시지는 아무거나(msg 1)넣고
그리고 status를 체크하면
아무것도 없다 이게 클린한것



*git commit -m "msg1"만 사용해도 됩니다. 그러나 이 경우 -m 옵션만 사용하면 Git이 자동으로 변경된 파일을 스테이징하지 않습니다. 즉, 이미 스테이징된 파일들만 커밋됩니다.


*[git commit –m "msg1"]

명시적으로 스테이징된 파일들을 커밋합니다.
git add 명령어를 통해 파일을 스테이징한 후에 사용해야 합니다.

ex)
git add <file1> <file2>
git commit -m "msg1"
이 방법을 사용할 때는 커밋할 파일을 명시적으로 스테이징해야 합니다.

[git commit –am "msg1"]
추적된 모든 변경 파일을 자동으로 스테이징하고, 커밋 메시지와 함께 커밋합니다.
수정된 파일들을 일일이 스테이징하지 않아도 됩니다.
ex)
git commit -am "msg1"
이 방법은 이미 Git이 추적 중인 파일들에 대해서만 작동합니다. 새로 추가된 파일은 포함되지 않습니다.

 *

시나리오 2) D(Deleted), R(Renamed)보이게 하기: 파일 옮기기  -> 스테이징 (D -> R)


















시나리오 3)
파일 삭제하기 (D)










## 파일 무시하기
- 파일 무시하기란?git으로 관리할 필요가 없는 파일을 관리하는 파일이 있을 때 걔를 빼고 올리겠다는 뜻
- 파일명: .gitignore 
- 이 파일은 최상위 디렉터리에 두고, 파일 내부에 관리할 파일의 패턴을 명시한다.( 이파일에는 파일의 이름이 아니라 우리가 관리 하고 싶은 파일의 패턴을 넣는 것)
- git  ingore로 관리하는 파일들의 예: 로그파일, 대용량 파일, 데이터, 등등 버전 관리가 필요없는 파일들
- 패턴: glob 패턴 사용

### glob pattern
이때까지 했던 내용
* : 0개 이상의 파일 (*.txt)
[abc] : a or b or c ([abc].txt)
? : 한 글자
[0-9] : - : range, 모든 숫자

다른 부분
1. 디렉토리 명시하는 방법
  tmp/(파일이 아니라 디렉토리 일때는 슬레쉬로 끝낸다)
2. 현재 디렉토리에"만" 적용하고 싶을 때
- a,txt를 캐칭 하고 싶고 tmp안에있는 a.txt는 무시하고 싶다고 하면 슬래쉬로 시작하면 된다. 그러면 현재 디렉토리에만 적용한다.
  /a.txt (o)
  /tmp/a.txt (x)
  /notes/tmp/a.txt (x)
3. !로 시작하는 디렉토리는 적용하지 않는다.
  !tmp/a.txt(슬래쉬로 시작했음에도 불구하고 저장시키고 싶으면 앞에 !를 쓰면된다)
4. ** : 디렉토리 내의 모든 디렉토리 적용(2번과 다르게 모든 노트파일에 적용하고 싶으면)
  tmp/**/notes

### 문제 : 무시할 파일 패턴으로 명시하기 (.gitignore)
1. 확장자가 .a인 파일
2. 1번 + lib.a는 제외
   *.a
   !lib.a
4. 현재 디렉토리bv 에 있는 TODO 파일은 적용하되, subdir/TODO 등 하위 디렉토리 파일은 적용하지 않도록
5. build 디렉토리에 있는 모든 파일 적용
6. doc/notes.txt 파일은 적용하고, doc/server/arch.txt 파일은 적용하지 않기
7. doc 디렉토리 아래 모든 .pdf 파일 적용하기
## 깃에서 파일 삭제하기(스테이징을 했던 것을 내리는 작업이 될수도 있고, 우리가 파일을 삭제하고 그것을 커밋을 하는 것등등..주의는 삭제는 한번하면 되돌리수 없다)
경우1. 현재 디렉토리에서 삭제 -> 커밋
    rm file
    git commit
   
경우2, 깃에서 바로 삭제하기 (staging 이 되었던 것을 unstaging 하는 것이라는 뜻)
   git rm file
   git commit
   
중요)커밋해야 함
- 삭제하는 행위는 되돌릴 수 없음
- 커밋 -> 수정 -> 삭제 (오류: 수정을 한뒤 커밋을 안하고 삭제하려는 경우 오류가 뜸 왜냐면 실수한 것일수 있기 때문에 그런 장치가 있음)
  - git rm –f file(-f옵션은 커밋되지 않은 파일일지라도 파일을 제거하도록한다)
    
경우3 언스테이징만 하고 파일은 가지고 있고 싶을 경우(깃에서는 삭제하고 싶지만 현재디렉토리에서는 파일을 가지고 싶을 때) ---cached쓰기
  git rm --cached file ##
  git rm —cached .gitignore (gitignore도 cached와 쓸 때 이런식으로 쓰면된다: git ignore을 업데이트를 하는데 가끔인식이 안될때가 있는데 그럴떄는   git rm —cached file을 사용해서 적용을 시키면된다)

4. 패턴 인식됨: git rm도  패턴을 인식한다.
   ex)git rm *.log (log확장자로 끝나는 모든 파일을 삭제하고 싶을 때)


##  파일 이름 변경하기

					

  git mv file1 file2       =

mv file1 file2
git rm file1
git add file2(파일을 삭제하는 것까지)


중요!!!! mv file1 file2  한다음에 commit꼭하기

## 커밋 히스토리 조회하기
1) 조회 방법
git log : 최근커밋을 보여줌

q로 빠져나옴

2)내가 원하는 조건 설정해서 조회하는 방법
1. n개 조회(몇개만 조회를 하고 싶다 :가장 최근에 한 커밋 n개)
   git log -3
   
2. 커밋마다 어떤 차이가 있는지 확인(diff) : -p(약간 자세하게 보는 느낌:어떤 부분에 커밋했는지 뭐가 추가 삭제가 되었는지 알수 있다.)






















   
3. --since —until특정기간동안의 커밋을 조회
   방1) --since=<date>: 특정한 날짜 이후의 커밋을 조회합니다.
        --until=<date>: 특정한 날짜 이전의 커밋을 조회합니다.

ex)git log —since=2.days —until=3.minutes(현재 브랜치의 커밋 히스토리에서 최근 2일 동안의 커밋을 조회하고, 이전 3분 동안의 커밋을 조회)
   방2)--since='2024-05-01'
   

4. -S(대문자S :어떤 텍스트를 포함하는 커밋을 검색하는데 ㅅ용)
   특정 텍스트가 포함된 커밋
   ex)git log –S tmp(tmp텍스트가 포함된 커밋을 조회하고 싶다)

5. 디렉토리 특정
   git log -- tmp/ notes/(--쓰고 한칸 띄어야함 : 근데 여러개 디렉터리 조회가능함 이어서 쓰면된다)
   
6. 통계 조회하기 ( -stat옵션사용:(어떤파일이 몇 번의 커밋이 이루어져서 몇 번의 수정이 이루어졌는지에관한 내용을 볼수 있다)
   git log —stat






















ㅋ

12. 사용자 지정 출력 형식으로 보기(--pretty 옵션사용내가 원하는 출력방식으로 볼수 있는 옵션)
   -git log --pretty
    -사용하는 인자:short, oneline, full, fuller
  ex) git log —pretty=short
  -format사용가능(format이라는 단어자체는 있어도 되고 없어도됨)
 ex) git log —pretty=format:“%h -%an, %ar : %s”
  git log --pretty=short

  
h : 커밋해시
an : author name
ar : author relative time
s : summary


























실습하기) 다음을 만족하는 커밋 히스토리를 검색하시오.
"커밋 해시 - 요약"
2008-10-1부터 2008-11-01까지
t/ 경로에 대해서

```
  git log -- t/ \
          --since="2008-10-1" \
          --until=3.days \
          --pretty=format:"%h - %s"
```

## 되돌리기
- 작업 도중 어떤 것을 되돌리기
- 돌아가는 시점은 그 파일에 대한 마지막 커밋
ex) 수정 –커밋 –수정 -되돌리기
- 되돌리면 복구 안됨

  1) 추가 커밋(커밋을 하고난뒤에 뭔가 바꾸고나서 하면 좋을걸이라고 후회할때하는 되돌리기)
  git commit —amend (추가로 커밋을 하고 싶을때는 –amend라는 옵션 사용)

  - 이전 커밋을 수정하는 역할
  - 수정을 추가한다.
    1. 커밋 -> 파일 새로 만들 때
    git commit
    git add
    git commit --amend
    2. 커밋 -> 수정 -> git commit -a --amend

  2) (스테이징을 했다가, 커밋을 했다가) 이전 상태로 되돌리기
    git reset HEAD file_name(파일이름)

  3) 파일 내용 되돌리기(어떤 것을 썼는데 나는 그냥 이거 안쓰겠다)
    git checkout -- file_name
    - 내용이 전부 사라지기 때문에 주의할 것

  수정 -> "커밋" -> 수정 -> 되돌리기


ex) “커밋”이후에 했던 모든 수정이 사라졌다.









-> 가나다라마바사 없어짐












# 원격 저장소(로컬장소와 원격저장소를 연결하는 작업)
remote repository(하나가 아니라 여러개다. 프로젝트마다 하나하나씩 만들게 된다)
- 인터넷이나 네트워크를 통해 로컬이 아닌 곳에 있는 저장소
- 읽고 쓰기 등의 권한을 지정할 수 있고(권한은 타인에게 부여하는 권한일수도 있다)
- 사용하는 목적: 협업
- 여러 개 등록 가능함
- 깃허브 (github)

1. 내 로컬에 원격 저장소 확인하기
   git remote (이 명령어를 치면 어떤 원격저장소와 저장이 되었는지 에 대한 정보를 뱉어냄) *보통저장소이름은 origin으로 뜸
   git remote -v (더 자세한 정보)

   - 현재 프로젝트에 등록된 원격 저장소 정보 확인하기
   - 원하는 디렉토리에 가서 실행해야 한다.









  
2. 원격 저장소 만들기 (깃허브에)
   참조 (https://velog.io/@kho5420/Git-GitHub-%EB%A0%88%ED%8C%8C%EC%A7%80%ED%86%A0%EB%A6%ACRepository-%EC%83%9D%EC%84%B1%ED%95%98%EA%B3%A0-%EC%86%8C%EC%8A%A4-%EC%98%AC%EB%A6%AC%EA%B8%B0)

   - 깃허브에서 레포 파기
   - pulic으로 해야 replit과 연결됨
   - .gitignore, readme 추가하지 말고 연결하기
   
    - 연결 url : github.com/내아이디/레포이름.git
      code > 복사하기 아이콘
    
4. 원격 저장소 추가하기(로컬저장소 = 내저장소)
   - replit 연동하기: https://zest1923.tistory.com/25
   
  1)
  git remote add <name> <url>
  - name : origin (주로), 내가 원하는 별명으로
  - git remote add origin https://github.com/trotacodigos/OSS.git

  2) 저장소의 정보 가져오기
  git fetch origin # 원격저장소에 정보있고 내저장소에도 정보가 있어서, 내용 비교하고 가져오기 위해
  git branch # 내 브랜치명 확인하기(브랜치명이 메인이면 git pull orign main 이렇게 하면된다)
  git pull origin main # 아예비어있을 때
  git pull <remote_name> <branch_name>

  3) 원격 저장소와 로컬 저장소 합쳐서 모두 원격으로 올리기
  git push -u origin main # -u 처음만 사용한다,(파일들을 전부다 깃허브에 올리겠다)

 
 4) 원격레포에 모든 파일이 업로드되면 완료


     
5. 루틴
   
  - pull & push(연결다하게되면 맨날하개되는 것)
  - 수정 > 커밋 > pull(원격저장소에 있는 모든 자료를 받는 것 왜냐면 어디까지 진행되있는지 체크함) > push (항상 pull 먼저 체크하기)

6. 과제
  - 나의 README.md 만들기(README는 URL에 접속했을 때 나오는 것)
    - 레포에 대한 소개, 설치 방법, 나와협업하려면 어떤식으로해야할지 알려주는 파일
    - contributing.md : README에 있는 특이한 파일







