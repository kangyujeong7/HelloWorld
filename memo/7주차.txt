#1 정규표현식
특징 1) 패턴 매칭 할 때 사용한다.
특징 2) 와일드 카드와 혼동하지 말 것 

1. line 기준(단어 기준x)11
2. 가장 긴 문자열 매칭
##1. 마침표
 - any single character (마침표는 어떤 캐릭터도 되는데 하나만 매칭)
 ex) r. / # ro,rk,rc,...
=>
$ grep r. file0
11grdy
abcdefghijklmnopqrstuvwxyz
ro rc rd
 ex).x.#xxx,oxo
 [a-zA-Z]


##2. ^(caret)
-라인의 처음(단어의 처음x문장의 처음o) ex)grep ^Ya file:문장의 처음에 Ya가 오는 경우 의 줄을 출력
-[^]:not
-[^a-z] # not의의미를 가짐./ 소문자가 아닌 것을 다 출력하라


##3. $(dollarsign)
-라인의 끝(단어의 끝x 문장의 끝o)
ex)’^ $‘#빈줄 -> ^와 $에 아무런 문자도 없는 경우 빈줄이 출력된다.
->$grep -v '^ $' animals.txt :grep 명령어에 -v 옵션을 사용하여 해당 패턴이 아닌 줄을 출력할 수 있습니다.
 ex)
	$ grep 'girl$' file            만약에  I am a good girl.
	i am a good girl                     you are a good girl. 이었으면 출력안됨
	you are a good girl         

ex)^The end$  The end와 정확하게 일치하는 문자열을 매칭합니다
 *$ :\필요없다





##4. [리스트] 
ex1)[a-z]
ex2)[a-np-z] #o를 제외한 모든 소문자
ex3)[a-n][p-z] : 두글자가 된다.  
ex)$ grep '[a-z][A-Z]' file
Ya ya YaYaYa Ya
aZ
ex4)<대소문자 구분안할때>
-grep '[Tt]he' animals.txt
-grep -i 'the' animals.txt
ex5)[a-d] = a|b|c|d


##5. *
-zero or more와일드 카드의 * vs 정규표현식의 *
와일드 카드:x* #x .....
정규표현식:앞글자 한정(x가 0번이상 나타날 수 있다)

실습하기)
Q. x 로 시작하는 단어 
A. x*(x):0이상이기 때문에 0가 되는 경우는 어떻게 할거냐
ex)$ grep 'x*' result
	horse   Linux in a Nutshell 2009    Siever, Ellen
donkey  Cisco IOS in a Nutshell 2005    Boney, James
oryx    Writing Word Macros 1999    Roman, Steven

xox
xxox
xty
 xx*(0)
ex)만약 "x"가 포함된 라인만을 찾으려면 x 문자를 명시적으로 지정해야 합니다.
=>$grep 'x' result

 만약에 xxx로 시작하는 단어를 찾아라 라고 하면
 xxxx*여야 한다. 왜냐 xxx+x를 0~반복하는 것 


##6. \+
-1개이상(one or more)
x\+
ex)
$  grep 'xx\+' result
xxxxx
xxx
xx+
##7. \? :a다음에 b가 있거나 없거나(ab또는 a)
-zero or one
~/KYG$ grep 'a\?' result
 aaa
ab
ac
a?
=======
$ grep 'ab\?' result
ab
ab
ac
a
a?
aaa
ab
aa
abb
abbbb

##8 \{i,j\}
-횟수를 나타내는 expression:원하는 횟수만큼을 찾고 싶다
x{n}	x가 정확히 n 번 나오면 일치합니다.
x{n,m}	x가 n 번 이상 m 번 이하로 나타나면 앞의 요소를 일치시킵니다.
x{n,}	x가 n 번 이상 나타나면 앞의 요소를 일치시킵니다.
x{,m}	x가 m 번 이하로 나타나면 앞의 요소를 일치시킵니다.
ex)x\{1,10\}#1번에서 10번까지
->$ grep 'x\{1,10\}' animals.txt
결과값
horse   Linux in a Nutshell 2009    Siever, Ellen
oryx    Writing Word Macros 1999    Roman, Steven
xxxxxxxxxx
xXXXX
xxx

ex)\{10,\}#10번이상


이 패턴은 정규표현식에서 중괄호 {} 안에 있는 숫자 범위를 나타냅니다. 이것은 반복 횟수를 지정하는데 사용됩니다.

여기서 i와 j는 반복의 최소 횟수와 최대 횟수를 나타내며, 숫자로 대체됩니다. 예를 들어, \d{3,5}는 3에서 5번의 숫자 반복을 나타냅니다. 이는 정확히 3, 4 또는 5자리 숫자와 일치하는 것을 찾을 때 유용합니다.

따라서 \{i,j\}는 정규표현식에서 반복의 최소 횟수(i)와 최대 횟수(j)를 지정하는 패턴입니다.

ab*
a 다음에 b가 0개 이상 (a, ab, abbb 
등등)
ab\+
a 다음에 b가 1개 이상 (ab, abbb 
등등)
ab?
a 다음에 b가 있거나 없거나 (ab 또는 
a)
ab{2}
a 다음에 b가 2개 있는 문자열 
(abb)
ab{2,}
a 다음에 b가 2개 이상 (abb, abbbb 
등등)
ab{3,5}
a 다음에 b가 3개에서 5개 사이 (abbb, 
abbbb, 또는 abbbbb)
*, +, ?는 각각 {0,}, {1,}, {0,1}과 같습니다.
출처: https://iamnotokay.tistory.com/85 [I am not Okay:티스토리]

*~/KYG$ grep 'ab\{3,\}' animals =>a다음에 b가 3번이상 오냐







* 이스케이프 처리가 필요한 문자
괄호 : [ ], { }, ( )
연산자 : *, +, ?, |
위치 : ^, $
기타 : ., \



##9 \{regex\}  *regex = 정규표현식
-back referencing(재활용)이 가능하다.

ex)'^\(.\)(.\)\2\1' # 동일한 알파벳 2개로 시작하는 라인 *aa...ll../ 숫자는 1-9까지 가능
->abba
ex)$ grep '\(a\)\(b\)\2\1' animals.txt
abba
ex) 
~/KYG$ grep '\(.\)\(.\)\2\1' animals.txt
xxxxxxxxxx
xXXXX
abba
ceec
abba
adda
~/KYG$ grep -w '\(.\)\(.\)\2\1' animals.txt
abba
ceec
abba
adda
*\d : 0123456789 범위의 모든 한 자리 숫자와 일치합니다.
ex) "a\d"는 "a" 다음에 숫자 하나가 오는 패턴을 찾습니다. "a1", "a2", "a3"과 같은 문자열이 이 패턴과 일치합니다.
실제 숫자 0-9는 숫자를 써서 표현할 수도 있습니다.

ex)a\2라면 출력값은
ChatGPT
정규 표현식에서 \2는 두 번째 그룹에서 매칭된 문자열을 참조하는 것을 의미합니다. 하지만 여기서 주어진 패턴 "a\2"은 두 번째 그룹이 없으므로 이는 그룹 참조가 아닌 문자 그대로의 의미를 갖게 됩니다.

따라서 "a\2" 패턴은 그냥 "a" 다음에 문자 "2"가 오는 문자열을 찾으려고 시도할 것입니다. 예를 들어, "a2"와 같은 문자열이 이 패턴과 일치할 것입니다.

그러나 이 패턴은 일반적으로 그룹 참조가 아니라 그대로 문자 "2"를 의미하게 됩니다.

*()는 정규표현식2에서 그룹을 형성하는데 사용.  문자를 하나의 단위로 묶어서 처리하거나, 매칭된 부분을 기억하고 다시 사용하는 등의 목적




*([abc])\1         :  \1은 첫번째 캡쳐그룹과 동일한 패턴을 의미합니다 
([abc])([de])\2\1   :  \2는 두번째 캡쳐그룹과 동일한 패턴을 의미합니다
                    ([abc])([de])([de])([abc])와 동일합니다
ex)~/KYG$ grep '\([abc]\)\([de]\)\2\1' result
*(x)(y):그룹들의 집합을 표현하며 앞에서 부터 순서대로 번호를 부여하여 관리하고 x, y 는 각 그룹의 데이터로 관리된다
*(x):그룹을 표현하며 x 를 그룹으로 처리함을 의미한다.
*[abc] :abc중 하나
*grep '[a-d]' file.txt :a,b,c,d를 포함하는 단어 출력


##10. regex1\| regex2
-regex1 or regex2
ex) tomato | potato : 'tomato'라는 패턴 또는 'potato'라는 패턴과 일치하는 모든 것들을 매칭한다. =>grep 'tomato\|potato' animals.txt


실습하기 )
1) a-f까지 매칭
->grep ‘[a-f]’ result
2)b나 ab매칭
->$ grep 'b\{1\}\|ab\{1\}' result
->$grep ‘b\ | ab’ file 
3)2번 + aaaaaab매칭
->$ grep 'b\|ab\|aaaaaab' animal
4)모든 글자 매칭
$ grep -v '^$' result

5) #으로 시작하는 문장 매칭
->$ grep '^#*' result
~/KYG$ grep '^#echo$' animal (#으로 시작하고 echo로 끝나는 문장)
~/KYG$ grep '^#$' animal(#으로 시작하고 #으로 끝나는 문장)
6)\ 로 끝나는 문장 매칭
->$ grep '\\$' result
good\
7)대문자로 시작하지 않는 문장 매칭
$ grep '^[^A-Z]' result
8)빈줄이 아니 모든 줄 매칭
grep -v '^$' file.txt

9)cookie 나 cake이 포함된 줄매칭
$ grep 'cookie\| cake ' result
cookie is good
cookieg
$ grep -w  'cookie\| cake ' result
cookie is good


10)w.매칭
##1.확장
 -\w(소문자) : 단어를 만들 수 있는 문자를 매칭. 알파벳 대소문자, 숫자, 언더스코어를 포함. [A-Za-z0-9_] 와 동일한 의미.
-모든 문자열을 찾을수 있다.

-\W(not) : 반대 

grdy
Ya ya YaYaYa Ya
abcdefghijklmnopqrstuvwxyz
ABSCEFGHIJKLMNIPQRSTUVWZYZ
1234567890
[] {} () \ ^ $ | ? * *
010-4633-4696
___   


~/KYG$ grep '\w' file
grdy
Ya ya YaYaYa Ya
abcdefghijklmnopqrstuvwxyz
ABSCEFGHIJKLMNIPQRSTUVWZYZ
1234567890
010-4633 -4696
___
~/KYG$ grep '\W' file
Ya ya YaYaYa Ya
[] {} () \ ^ $ | ? * *
010-4633-4696




겁나 중요!!!!!!1
grep \w animal =그냥 알파벳 w매칭
grep '\w' animal =정규표현식
     

 




-\b(wordboundary , 한 단어에 한정)
 : 문자와 공백 사이를 표현. 문자열의 시작, 끝, 개행, 탭, 콤마(','), 구두점('.'), 대시('-') 등이 해당된다.
ex) \bplay\b : 단어 경계로 구분되는 'play'에는 매칭. ('I play the game on the playground' 에서 'play'를 매칭O / 'playground' 는 매칭X) 
=> 단어와 단어사이의 경계
ex)$ grep '\bplay\b' animals.txt
I play the game on the playground.
play, good, play
play.play. codplay
play-good

*\b ya :ya중에서 단어 앞에서 쓰는 것에만 매칭(ya앞에 아무것도 안온다)
ex)	$ grep '\bya' animals.txt
	yassss
*ya\b:ya중에서 단어 뒤에서 쓰는 것에만 매칭(ya뒤에 아무것도 안온다)
ex)$ grep 'ya\b' animals.txt
*yaaaaya '는 '\b ya \b'와 일치하지 않습니다.
=> 이경우 ya만 출력가능
- \B : \b 가 아닌것. 
ex) play\B : 'play' 뒤에 단어의 경계가 아닌 것이 올때, 즉 문자열의 연속이 되는 패턴만 매칭.
('I play the game on the playground' 에서 'playground' 를 매칭O / 'play'는 매칭X, 이때 'playground'를 매칭한다고 해서 'playground' 전체를 의미하는 것이 아닌, 'playground' 안의 'play' 만을 찾아낸다.)
$ grep '\Bya' animal
goodya

\b<regex>\b
 \<앞\>뒤
\B ell


\s :whitespace(space=공백,tab) )
= 그니깐 띄어쓰기를 찾는다.
\S : White-space (공백) 문자를 제외한 모든 문자에 매칭. 
ex) grep '\S' animal

grdy
Ya ya YaYaYa Ya
abcdefghijklmnopqrstuvwxyz
ABSCEFGHIJKLMNIPQRSTUVWZYZ
1234567890
[] {} () \ ^ $ | ? * *
010-4633-4696
___
       good

$ grep '\s' file
Ya ya YaYaYa Ya
[] {} () \ ^ $ | ? * *
       good
$ grep '\S' file
grdy
Ya ya YaYaYa Ya
abcdefghijklmnopqrstuvwxyz
ABSCEFGHIJKLMNIPQRSTUVWZYZ
1234567890
[] {} () \ ^ $ | ? * *
010-4633-4696
___
       good








#2. ed(에디터,-line oriented text editory)
-텍스트 에디터: 텍스트를 에디팅 하니깐정규표현식을 쓸것
-인터렉티브형: 내가 라인을 넣어주면 걔가 그 결과값을 준다, 표준입력, 즉,터미널로 받는다. 이 말은 내가 파일을 불러와서 작업을하는게 아니라 어디로 진입한다.
- format:첫째,ed file ->그러면 파일(?)열림 둘째, 정규표현식 치면 그 결과값 알려줌

-실습하기) 치환(a->b)하라(*address범위)
[address][명령][정규식][flags]
0. ed animals.txt 로 파일열기
1)1,$s/a/b/(1,$:처음부터 끝까지,s:substitution,치환 a->b로)
->그러면 a가b로 다 바껴있을것
2)이를 print 해야 한다,
->1,$p
3)ctrl +d두번 누르면 나간다.

실습하기)
1,$s/[a-z]//g #global (flag)   
->g가 없으면 한줄에 하나씩만 바뀌는데 g가 있으면 그줄 전체를 바꾼다.

두 명령어 간의 차이는 'g' 플래그의 유무에 있습니다.

1,$s/[a-z]//g

'g' 플래그가 있는 경우, 각 줄에서 발견된 모든 소문자를 대체합니다. 즉, 한 줄에 여러 개의 소문자가 있을 경우 모두 제거됩니다.
1,$s/[a-z]//

'g' 플래그가 없는 경우, 각 줄에서 첫 번째로 발견된 소문자만 제거됩니다. 그러므로 한 줄에 여러 개의 소문자가 있더라도 첫 번째로 발견된 소문자만 제거되고 나머지는 남게 됩니다.

실습하기) 모든모음 지우기> ?..
$s/[aeiou]//g

Q)animals.txt에서 python ->PYTHON 변경 후 파일 전체 동일한 이름으로 저장하기
방법1)
tr의 옵션에는 같은 파일에 저장하는 것x ->근데 sed는-i옵션으로 같은 파일에 저장

#3. sed의 특징(https://www.ibm.com/docs/ko/aix/7.2?topic=s-sed-command)
 - stream editor
 -표준 입출력 사용가능, 파이프라인 사용 가능
 -인터렉티브(x): ed처럼 인터렉티브하지 않는다. 즉, 어디로 진입x
 - 단위: ed에서 했던 것 처럼라인 
 format: sed <option> <script><inpit_file> # full format


Q)animals.txt에서 python->PYTHON으로 변경후 파일 전체 동일한 이름으로 저장

 $tr pyton PYTHON > animals.txt

sed –i ‘s/python/PYTHON/g’ animals.txt



##2)sed실행하기
 -format : sed<script> <input_file> (> <out_file>)
=> 저장하려면 out_file로 저장
=>script부분에 정규표현식이 들어감
실습하기) helloworld에서 hello를world로 바꿔라. 입력파일이름은 file
-sed정의:
sed는 비 대화형 모드의 줄 단위 편집기라고 합니다. 
vi 편집기처럼 직접 파일을 열어 고치지 않고 커맨드 창 또는 스크립트에서 동작을 하여 원하는 부분만 변경해준다는 특징이 있습니다.




 ###-i option
 - 동일한 파일에 저장한다(in -place)
 - 임시파일을 따로 저장하고 싶을때 –iE :그러면file이름에E가 붙는다. #fileE 

 ### -n option(범위만 프린트 하고 싶을 때)
 -p와 같이 사용하여 출력 범위를 지정한다.
  ex)sed -n '2p' file(2번째줄만 출력하는 것)
- 5-10 줄 출력하기
 ex) sed –n '5,10p' file # , - range의미(ed할때처럼)
 -python이 있는 라인만 출력
ex) sed -n '/python/p' file 
- ; (세미콜론)으로 여러 정규식 연결 가능




*역슬래시: 역슬래시는 일반적으로 특수 문자를 이스케이프하기 위해 사용됩니다. 예를 들어, 작은 따옴표(') 안에서 작은 따옴표를 표현하려면 \'와 같이 사용됩니다.

슬래시:정규 표현식에서도 슬래시는 패턴의 시작과 끝을 나타내는 데 사용됩니다. 예를 들어, /pattern/은 해당 패턴을 검색하는 데 사용됩니다.

ex) sed -n '1p ; $p' file(첫번째랑 마지막 출력해줘)
->sed -n '1p ; $p': sed 명령어를 사용하여 표준 입력으로부터 받은 데이터에서 첫 번째 줄과 마지막 줄만 출력합니다. 
ex)sed -n '1p ; $p' fileA fileB fileC(파일끼리 붙일때는 cat에서 한 것처럼 생각하기/첫번째는 fileA에 있을 것이고 마지막은 fileC에 있을 것)
  cat fileA fileB fileC | sed -n '1p ; $p'
  ### -e.-f옵션
  -e :expression, -e 옵션을 사용하여 여러 개의 sed 명령어를 지정할 수 있습니다. 각 -e 옵션 다음에는 sed 스크립트의 한 줄이 옵니다.
ex)sed -e 's/apple/orange/' -e 's/banana/pear/' filename =>이 경우 g 사용불가
  -f : file(sed수행 스크립트를 파일에 저장하고 해닫 파일을 이용하여 sed를 수행할 때 사용)

  sed -e 'ip ; $p' -f file
   - -e 옵션이 없으면 1번째 인자는 정규표현식, 2번째 인자는 입력파일
   - 없어도 순서대로 하는데 구체화 시켜줘야 할때가 있어
   
*보통 sed 명령어에서는 -e 옵션을 사용하여 직접적으로 sed 스크립트를 지정하거나 -f 옵션을 사용하여 파일에 저장된 sed 스크립트를 실행합니다. -e 옵션이 없는 경우에는 주로 표준 입력을 통해 sed 스크립트를 전달합니다.
 


### -d option
sed ‘3d’ file (3번째 줄 삭제하고 나머지 모든 줄 출력)
sed ‘3,$d’ file (3번째 줄부터 마지막 줄까지 삭제하고, 나머지 모든 줄 출력)
sed ‘$d’ file (마지막 줄을 삭제하고 나머지 모든 줄 출력)
sed ‘/north/d’ file (패턴과 일치하는 줄을 삭제하고, 나머지 줄 출력)

 ##3) script
 -format: <address>(=범위ex1~s)<cmd>(=명령)<options>
 ex)'2p' -address(범위) :2 -cmd : p
 ex)5,10p - (5부터 10을 프린트해줘, 옵션x)
 ex)'3d' : 3번째라인을 지워라

Q. input_file 에서 python으로 시작하는 라인 삭제하고, hello ->world 로 변경한뒤 out_file에 저장하라(sed사용)
A. 
$ sed -e '/^hello/d' -e 's/hello/world/' input_file > out_file
Hello Hello Hello world Hellos 
$ sed '/^python/d ; s/hello/world/' input_file > out_file
Hello Hello Hello world Hellos 



Q. 
1)5번재 줄 삭제
sed ‘5d’ file
2)python,Python 포함 줄 삭제
sed '/[pP]ython/d' animal
sed 's/[pP]ython//g' file
3) 처음 10개줄 중 2번실행
$ sed -n '2p' animal
4) 각줄에 첫 3글자 삭제
sed -i 's/^...//' file


s’/python//g’
-p ,d ,s(삭제가능) ,q(quit)

###cmd 's'
-format: s/regex/replacement/flag(regex로 매칭 되는 애를 replacement로 바꿔라)
-g
-p: 해당부분이 매칭 되었을때 프린트
-i : 대소문자 구분 없음


Q.image.jpg.1, image.jpg.2, image.jpg.3
를 image1.jpg, image2.jpg, image3.jpg로 바꿔보자(sed이용)

->괄호써서 위치 바꿔야하고 패턴 매칭
$ echo "image.jpg.1, image.jpg.2, image.jpg.3" | sed 's/image\.jpg\.\([1-3]\)/image\1\.jpg/g'
image1.jpg, image2.jpg, image3.jpg
### address
-범위 지정
-치환하는 것을 연습을 많이 해라
ex1) sed ‘160s/a/b’(160번째줄에서 a를 b로 바꿔라 위치는 s앞)
ex2) sed ‘ /apple/s/a/b/’(apple이 있는 부분 / 숫자라면 그냥 나오지만. 정규표현식으로 찾을 때는 슬래시를 넣고 정규표현식을 넣어야 함. 위치는 항상 command앞)(apple이 있는 부분에서 뭔가를 하는)
ex3) sed ‘ /apple/!s/a/b/’(! = not , apple이 없는 부분에서 뭔가를 하는)
ex4) sed ‘160,200s/a/b/’(범위: 띄어쓰지 않고 쉼표로 바로 범위를 지정해야함) 
ex5) sed ‘160,2s/a/b/’ (b가 더 작을때는 그냥 160만 하고 끝 오류는 안나지만 이렇게 쓸 이유는 없다)
ex6)$ 마지막줄
ex7)1,$~2 # step==2    (1에서 2까지 2step이면 물결표시)
=>sed -n '1~2p' 파일명(첫줄부터 2칸씩 띄어가며 출력)




#스크립트 작성(그 안의 내용이 프린트 된게 아니라 그 안의 셸스크립트가 실행된것)
1.파일에 커맨드라인 입력
2.모드 변경한다. => chmod(changemode) +x 실행할 파일이름
3. 실행 name이 안되면 ./name치기

*  -주석#로 단다
  - 라인 단위.


*와일트 카드 정규표현식 차이
와일드 카드 : 파일명 출력
정규표현식 :파일 내용 출력




https://hitomis.tistory.com/68

https://laoching.tistory.com/entry/%EC%A3%BC%EB%A1%9C-%EC%93%B0%EC%9D%B4%EB%8A%94-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D

-i 옵션 :sed에서는 대소문자 옵션 아님 다시 자기파일에 저장하는 용도
 grep에서는 됨